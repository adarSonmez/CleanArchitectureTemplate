// <auto-generated />
using System;
using CleanArchitectureTemplate.Persistence.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CleanArchitectureTemplate.Persistence.Migrations
{
    [DbContext(typeof(EfDbContext))]
    [Migration("20250423125502_AddRowVersion")]
    partial class AddRowVersion
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Shared.BaseEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeletedBy")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<uint?>("Version")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("xid")
                        .HasColumnName("Version");

                    b.HasKey("Id");

                    b.ToTable("BaseEntity");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Persistence.Identity.AppRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("Roles", "Identity");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Persistence.Identity.AppUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("RefreshToken")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<DateTimeOffset?>("RefreshTokenExpiration")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("RefreshToken")
                        .IsUnique();

                    b.ToTable("Users", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<string>("ClaimValue")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", "Identity");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("Name")
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", "Identity");
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.HasKey("ProductId", "CategoryId");

                    b.HasIndex("CategoryId");

                    b.ToTable("ProductCategories", "Shopping");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.CategoryImageFile", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FileDetailsId")
                        .HasColumnType("uuid");

                    b.HasIndex("CategoryId");

                    b.HasIndex("FileDetailsId");

                    b.ToTable("CategoryImageFiles", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<string>("Extension")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)")
                        .HasColumnName("FileType");

                    b.Property<string>("Folder")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasDefaultValue("");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<string>("Storage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("StorageType");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_FileDetails_Name");

                    b.ToTable("FileDetails", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.InvoiceFile", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("FileDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InvoiceId")
                        .HasColumnType("uuid");

                    b.HasIndex("FileDetailsId");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceFiles", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.ProductImageFile", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("FileDetailsId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.HasIndex("FileDetailsId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductImageFiles", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.ReportFile", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("FileDetailsId")
                        .HasColumnType("uuid");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("ReportType");

                    b.HasIndex("FileDetailsId");

                    b.ToTable("ReportFiles", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.UserAvatarFile", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("FileDetailsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasIndex("FileDetailsId");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("UserAvatarFiles", "Files");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.ToTable("Customers", "Membership");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Store", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Website")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.ToTable("Stores", "Membership");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Ordering.Invoice", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("PaidAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethod")
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("TransactionId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasIndex("OrderId");

                    b.ToTable("Invoices", "Ordering");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Ordering.Order", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.HasIndex("BasketId");

                    b.ToTable("Orders", "Ordering");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("CustomerId")
                        .HasColumnType("uuid");

                    b.Property<bool>("Ordered")
                        .HasColumnType("boolean");

                    b.HasIndex("CustomerId");

                    b.ToTable("Baskets", "Shopping");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.BasketItem", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<Guid>("BasketId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uuid");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.HasIndex("BasketId");

                    b.HasIndex("ProductId");

                    b.ToTable("BasketItems", "Shopping");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<Guid?>("ParentCategoryId")
                        .HasColumnType("uuid");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Categories_Name");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories", "Shopping");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", b =>
                {
                    b.HasBaseType("CleanArchitectureTemplate.Domain.Shared.BaseEntity");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<decimal>("DiscountRate")
                        .HasPrecision(5, 2)
                        .HasColumnType("numeric(5,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(191)
                        .HasColumnType("character varying(191)");

                    b.Property<string>("StandardPrice")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<Guid>("StoreId")
                        .HasColumnType("uuid");

                    b.HasIndex("Name")
                        .HasDatabaseName("IX_Products_Name");

                    b.HasIndex("StoreId");

                    b.ToTable("Products", "Shopping");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductCategory", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", null)
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.CategoryImageFile", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "FileDetails")
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.CategoryImageFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FileDetails");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.InvoiceFile", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "FileDetails")
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.InvoiceFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Ordering.Invoice", "Invoice")
                        .WithMany()
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDetails");

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.ProductImageFile", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "FileDetails")
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.ProductImageFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", "Product")
                        .WithMany("ProductImageFiles")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDetails");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.ReportFile", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "FileDetails")
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.ReportFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDetails");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Files.UserAvatarFile", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Files.FileDetails", "FileDetails")
                        .WithMany()
                        .HasForeignKey("FileDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.UserAvatarFile", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Files.UserAvatarFile", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileDetails");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Store", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Membership.Store", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Persistence.Identity.AppUser", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Membership.Store", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Ordering.Invoice", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Ordering.Invoice", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Ordering.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CleanArchitectureTemplate.Domain.ValueObjects.Address", "BillingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("OrderId");

                            b1.ToTable("BillingAddress", "Ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("BillingAddress");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Ordering.Order", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", "Basket")
                        .WithMany()
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Ordering.Order", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("CleanArchitectureTemplate.Domain.ValueObjects.Address", "ShippingAddress", b1 =>
                        {
                            b1.Property<Guid>("OrderId")
                                .HasColumnType("uuid");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<string>("Country")
                                .IsRequired()
                                .HasMaxLength(255)
                                .HasColumnType("character varying(255)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasMaxLength(15)
                                .HasColumnType("character varying(15)");

                            b1.HasKey("OrderId");

                            b1.ToTable("ShippingAddresses", "Ordering");

                            b1.WithOwner()
                                .HasForeignKey("OrderId");
                        });

                    b.Navigation("Basket");

                    b.Navigation("ShippingAddress");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", "Customer")
                        .WithMany("Baskets")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.BasketItem", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", "Basket")
                        .WithMany("BasketItems")
                        .HasForeignKey("BasketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Shopping.BasketItem", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", "Product")
                        .WithMany("BasketItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Basket");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Shopping.Category", "ParentCategory")
                        .WithMany()
                        .HasForeignKey("ParentCategoryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", b =>
                {
                    b.HasOne("CleanArchitectureTemplate.Domain.Shared.BaseEntity", null)
                        .WithOne()
                        .HasForeignKey("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CleanArchitectureTemplate.Domain.Entities.Membership.Store", "Store")
                        .WithMany("Products")
                        .HasForeignKey("StoreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Store");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Customer", b =>
                {
                    b.Navigation("Baskets");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Membership.Store", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Basket", b =>
                {
                    b.Navigation("BasketItems");
                });

            modelBuilder.Entity("CleanArchitectureTemplate.Domain.Entities.Shopping.Product", b =>
                {
                    b.Navigation("BasketItems");

                    b.Navigation("ProductImageFiles");
                });
#pragma warning restore 612, 618
        }
    }
}
